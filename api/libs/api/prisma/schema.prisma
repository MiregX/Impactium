generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("API_DATABASE_URL")
}

// refers to: client\context\User.tsx
enum LoginType {
  discord
  google
  github
  telegram
  steam
}

model User {
  uid           String       @id @default(cuid())
  register      DateTime     @default(now())
  email         String?      @unique
  logins        Login[]
  comments      Comment[]
  teams         Team[]
  participate   TeamMembers[]
  tournaments   Tournament[]
  invites       TeamInvitements[]
  transactions  Transaction[]
}

model Login {
  uid         String
  id          String    @unique
  user        User      @relation(fields: [uid], references: [uid])
  type        LoginType
  on          DateTime  @default(now())
  avatar      String?
  displayName String
  lang        String
}

model Team {
  indent        String       @id @unique
  logo          String?
  title         String?
  description   String?
  ownerId       String
  membersAmount Int          @default(0)
  owner         User         @relation(fields: [ownerId], references: [uid])
  tournaments   Tournament[]
  members       TeamMembers[]
  battles       Battle[]
  invites       TeamInvitements[]
  comments      Comment[]
}

model TeamMembers {
  id            String        @id @default(cuid())
  uid           String
  user          User          @relation(fields: [uid], references: [uid])
  tid           String
  team          Team          @relation(fields: [tid], references: [indent])
  roles         Roles[]
}

model TeamInvitements {
  id            String        @id @default(uuid())
  uid           String
  user          User          @relation(fields: [uid], references: [uid])
  tid    String
  team          Team          @relation(fields: [tid], references: [indent])
  date          DateTime      @default(now())
}

model Comment {
  cid          String    @id @default(cuid())
  uid          String
  user         User      @relation(fields: [uid], references: [uid])
  content      String
  date         DateTime  @default(now())
  likes        Int       @default(0)
  teamIndent   String?
  team         Team?     @relation(fields: [teamIndent], references: [indent])
  tournamentIndent String?
  tournament   Tournament? @relation(fields: [tournamentIndent], references: [code])

  @@index([teamIndent], name: "teamIndent")
  @@index([tournamentIndent], name: "tournamentIndent")
}

enum Roles {
  owner
  carry
  mid
  offlane
  semisupport
  fullsupport
  rotation
  coach
}

model Tournament {
  id          String      @id @default(cuid())
  banner      String
  title       String
  start       DateTime
  end         DateTime
  description Json
  code        String      @unique
  rules       Json
  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [uid])
  teams       Team[]
  gid         String
  grid        Grid?
  comments    Comment[]
}

model Grid {
  tid           String        @unique
  tournament    Tournament    @relation(fields: [tid], references: [id])
  winnerId      String?
  battles       Battle[]
}

model Battle {
  id            String     @id @default(cuid())
  winnerId      String?
  gid           String
  grid          Grid       @relation(fields: [gid], references: [tid])
  teams         Team[]
}

enum TransactionStatus {
  success
  pending // для пополнений и вывода
  canceled
  error
}

model Transaction {
  id            String    @id @default(cuid())
  uid           String
  user          User      @relation(fields: [uid], references: [uid])
  coins         Int
  date          DateTime  @default(now())
  status        TransactionStatus
}

model Changelog {
  id            String      @id @default(cuid())
  on            DateTime    @default(now())
  new           String
}