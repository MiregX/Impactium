generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("API_DATABASE_URL")
}

// refers to: client\context\User.tsx
enum LoginType {
  discord
  google
  github
  telegram
  steam
}

model User {
  uid           String       @id @default(cuid())
  register      DateTime     @default(now())
  email         String?      @unique
  // Отображаемый аватар, если пользователь захочет поставить свой, вместо того, что отображается после последнего логина
  avatar        String?
  // Никнейм который отображается в UI сайта для удобного идентифицирования
  // Герасимчук Марк
  // Вскукарачиватель
  // PRO100RUBIK
  displayName   String?
  // Юзернейм: <Без @>
  // @mireg
  // @admin
  // @system
  username      String?      @unique
  verified      Boolean      @default(false)
  logins        Login[]
  comments      Comment[]
  teams         Team[]
  participate   TeamMember[]
  tournaments   Tournament[]
  transactions  Transaction[]
}

model Login {
  uid         String
  user        User      @relation(fields: [uid], references: [uid])
  id          String    @id @default(uuid())
  type        LoginType
  on          DateTime  @default(now())
  avatar      String?
  displayName String?
}

model Team {
  indent        String       @id @unique
  logo          String?
  title         String?
  description   String?
  ownerId       String
  registered    DateTime     @default(now())
  owner         User         @relation(fields: [ownerId], references: [uid])
  joinable      Joinable     @default(Invites)
  tournaments   Tournament[]
  members       TeamMember[]
  comments      Comment[]
  invites       TeamInvite[]
}

model TeamMember {
  id            String        @id @default(cuid())
  uid           String
  user          User          @relation(fields: [uid], references: [uid])
  indent        String
  team          Team          @relation(fields: [indent], references: [indent])
  role          Role?
}

model Comment {
  cid          String    @id @default(cuid())
  uid          String
  user         User      @relation(fields: [uid], references: [uid])
  content      String
  date         DateTime  @default(now())
  likes        Int       @default(0)
  teamIndent   String?
  team         Team?     @relation(fields: [teamIndent], references: [indent])
  tournamentIndent String?
  tournament   Tournament? @relation(fields: [tournamentIndent], references: [code])

  @@index([teamIndent], name: "teamIndent")
  @@index([tournamentIndent], name: "tournamentIndent")
}

enum Role {
  Carry
  Mid
  Offlane
  SemiSupport
  FullSupport
  Rotation
  Coach
}

enum Joinable {
  Free
  Invites
  Closed
}

model Tournament {
  id                  String        @id @default(cuid())
  banner              String
  title               String
  start               DateTime
  end                 DateTime
  description         Json
  code                String        @unique
  rules               Json
  ownerId             String
  owner               User          @relation(fields: [ownerId], references: [uid])
  teams               Team[]
  comments            Comment[]
  live                String?
  prize               Int           @default(0)
  createdAt           DateTime      @default(now())
  iterations          Iteration[]
  has_lower_bracket   Boolean       @default(false)
}

model Iteration {
  is_lower_bracket    Boolean
  tournament          Tournament      @relation(fields: [tid], references: [id])
  startsAt            DateTime
  battles             Battle[]
  best_of             Int             @default(1)
  tid                 String
  id                  String          @id @default(uuid())
  n                   Int
}

model Battle {
  id                        String          @id @default(uuid())
  iteration                 Iteration       @relation(fields: [iid], references: [id])
  iid                       String
  slot1                     String
  slot2                     String?
  is_slot_one_winner        Boolean?
  games                     Game[]
  createdAt                 DateTime        @default(now())
}

model Game {
  id            String          @id @default(uuid())
  battle        Battle      @relation(fields: [bid], references: [id])
  bid           String
  n             Int
  matchId       String?   // С доты для анализа
  winner        String?
}

enum TransactionStatus {
  success
  pending
  canceled
  error
}

model Transaction {
  id            String    @id @default(cuid())
  uid           String
  user          User      @relation(fields: [uid], references: [uid])
  coins         Int
  date          DateTime  @default(now())
  status        TransactionStatus
}

model Changelog {
  id            String      @id @default(cuid())
  on            DateTime    @default(now())
  new           String
}

model TeamInvite {
  id            String      @id @default(cuid())
  created       DateTime    @default(now())
  indent        String
  team          Team        @relation(fields: [indent], references: [indent])
  used          Int         @default(0)
  maxUses       Int         @default(4)
  declines      Int         @default(0)
}
